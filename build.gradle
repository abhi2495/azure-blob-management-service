plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.7.RELEASE'
    id "com.github.node-gradle.node" version "2.2.3"
    id 'jacoco'
    id "org.sonarqube" version "2.8"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.node-gradle.node'
apply plugin: "org.sonarqube"

group 'com.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile group: 'com.azure', name: 'azure-storage-blob', version: '12.6.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.5.RELEASE'


    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

bootJar{
    mainClassName = 'com.example.Application'
}

node {
    download = true
    version = '12.16.3'
}

task runAzurite() {
    dependsOn npmInstall
    doLast {
        exec {
            executable "sh"
            args "-c", "mkdir -p azurite"
        }
        exec {
            executable "sh"
            args "-c", "touch azurite/debug.log"
        }
        exec {
            executable "sh"
            args "-c", "npm run azurite-help"
        }

    }
}

test.dependsOn runAzurite

test {
    testLogging.showStandardStreams = true
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco-report.xml")
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.62
            }
        }
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

check.dependsOn jacocoTestCoverageVerification

/*
processResources {
    expand(project.properties)
}
 */